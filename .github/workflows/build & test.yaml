name: Build and Test

on:
  push:
    branches: [ "master" , "release/*" ]
  pull_request:
    branches: [ "master", "release/*" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
#      Checkout codebase
      - name: Checkout Codebase
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

# Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow from installing Poetry every time, which can be slow.
# Note the use of the Poetry version number in the cache key, and the "-0" suffix: this allows you to invalidate the cache manually if/when you want
# to upgrade Poetry, or if something goes wrong. This could be  mildly cleaner by using an environment variable, but I don't really care.
      - name: Cache Poetry Install
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-1.3.2-0

#      Install Poetry
      - name: Install Poetry
        run: pip install poetry

# Cache your dependencies (i.e. all the stuff in your `pyproject.toml`). Note the cache key: if you're using multiple
# Python versions, or multiple OSes, you'd need to include them in the cache key. I'm not, so it can be simple and just depend on the poetry.lock.
      - name: Cache Project Dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

# Install dependencies. `--no-root` means "install all dependencies but not the project itself", which is what you want to avoid
# caching _your_ code. The `if` statement ensures this only runs on a cache miss.
      - name: Install Dependencies
      - run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'

# Now install _your_ project. This isn't necessary for many types of projects -- particularly things like Django apps don't need this.
# But it's a good idea since it fully-exercises the pyproject.toml and makes that if you add things like console-scripts at some point
# that they'll be installed and working.
      - run: poetry install --no-interaction

#       Run tests
      - name: Run Tests
      - run: poetry run pytest


